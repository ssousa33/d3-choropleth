const edUrl = 'https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json';

const countyUrl = 'https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json';

const body = d3.select('body');

 const svg = d3.select('svg'),
        w = +svg.attr('width'),
        h = +svg.attr('height');

var tooltip = body.append("div")
  .attr("class", "tooltip")
  .attr("id", "tooltip")
  .style("opacity", 0);


const unemployment = d3.map();

const path = d3.geoPath();

const x = d3.scaleLinear()
    .domain([2.6, 75.1])
    .rangeRound([600, 860]);

const color = d3.scaleThreshold()
    .domain(d3.range(2.6, 75.1, (75.1-2.6)/8))
    .range(d3.schemePurples[8]);

var g = svg.append("g")
    .attr("class", "key")
    .attr("id", "legend")
    .attr("transform", "translate(0,40)");

g.selectAll("rect")
  .data(color.range().map(function(d) {
      d = color.invertExtent(d);
      if (d[0] == null) d[0] = x.domain()[0];
      if (d[1] == null) d[1] = x.domain()[1];
      return d;
    }))
  .enter().append("rect")
    .attr("height", 8)
    .attr("x", function(d) { return x(d[0]); })
    .attr("width", function(d) { return x(d[1]) - x(d[0]); })
    .attr("fill", function(d) { return color(d[0]); });

g.append("text")
    .attr("class", "caption")
    .attr("x", x.range()[0])
    .attr("y", -6)
    .attr("fill", "#000")
    .attr("text-anchor", "start")
    .attr("font-weight", "bold")

g.call(d3.axisBottom(x)
    .tickSize(13)
    .tickFormat(function(x) { return Math.round(x) + '%' })
    .tickValues(color.domain()))
    .select(".domain")
    .remove();

window.onload = async () => {
  
  const county = await d3.json(countyUrl)
  .catch(e=>console.log(e));
  
  const ed = await d3.json(edUrl)
  .catch(e=>console.log(e));
  
  
 
  
  const path = d3.geoPath();
  
  
  
  
   svg.append("g")
      .attr("class", "counties")
      .selectAll("path")
      .data(topojson.feature(county, county.objects.counties).features)
  .enter().append("path")
      .attr("class", "county")
      .attr('data-fips',d=>d.id)
      .attr('data-education',(d=>{
     let result = ed.filter(obj=>{
       return obj.fips == d.id;
     });
     if (result[0]){
       result[0].bachelorsOrHigher
     }
     console.log('could find data for: ', d.id);
        return 0
   }))
  .attr('fill',(d)=>{
     let result = ed.filter(obj=>{
       return obj.fips == d.id;
       
     });
     if (result[0]){
       return color(result[0].bachelorsOrHigher)
     }
     return colors(0)
   })
  .attr("d", path)
      .on("mouseover", function(d) {      
        tooltip.style("opacity", .9); 
        tooltip.html(function() {
          var result = ed.filter(function( obj ) {
            return obj.fips == d.id;
          });
          if(result[0]){
            return result[0]['area_name'] + ', ' + result[0]['state'] + ': ' + result[0].bachelorsOrHigher + '%'
          }
          return 0
        })
     .attr("data-education", function() {
        var result = ed.filter(function( obj ) {
          return obj.fips == d.id;
        });
        if(result[0]){
          return result[0].bachelorsOrHigher
        }
          return 0 })
  .style("left", (d3.event.pageX + 10) + "px") 
          .style("top", (d3.event.pageY - 28) + "px"); }) 
          .on("mouseout", function(d) { 
            tooltip.style("opacity", 0); 
          });
  
  
  
  
  
  
  
  
  
 
  
  
  
}